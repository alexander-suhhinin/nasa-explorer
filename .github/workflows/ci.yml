

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCY_PATH: |
    **/package-lock.json
    **/yarn.lock
    **/pnpm-lock.yaml

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(env.CACHE_DEPENDENCY_PATH) }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run backend linting
        run: |
          cd backend
          npm run lint || echo "No lint script found"

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || echo "No lint script found"

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(env.CACHE_DEPENDENCY_PATH) }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build || echo "No backend build step defined"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist
          retention-days: 1



  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./infra/docker/Dockerfile.backend
          target: prod
          push: false
          tags: nasa-explorer-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./infra/ngnix
          file: ./infra/ngnix/Dockerfile
          push: false
          tags: nasa-explorer-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment completed successfully!"
          # Add notification logic (Slack, Email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          # Add failure notification logic